Metadata-Version: 2.4
Name: cosmology_uphi
Version: 0.0.3
Summary: An archive of codes for cosmology.
Author-email: Hongfei Yu <uphi.ustc@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/Phiyu/cosmology
Project-URL: Issues, https://github.com/Phiyu/cosmology/issues
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# cosmology

ðŸ“– This is an archive for some functions to process cosmology problems.

## Structure
```
cosmology_uphi/
â”œâ”€â”€ __pycache__/
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ __pycache__/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ binned_correction.py
â”‚   â”œâ”€â”€ gaussian_field.py
â”‚   â”œâ”€â”€ sigma8.py
â”œâ”€â”€ fast_plot/
â”‚   â”œâ”€â”€ __pycache__/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ fplt.py
â”œâ”€â”€ growth/
â”‚   â”œâ”€â”€ __pycache__/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ linear_growth_factor.py
â”œâ”€â”€ power_spectrum/
â”‚   â”œâ”€â”€ __pycache__/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ estimator.py
â”œâ”€â”€ __init__.py
```

## Functions
Suppose we load the package as `import cosmology_uphi as cu`
### data
- `cu.P_bc(L, N, dataset) -> function(x)`
- `cu.gf(L, N, dataset, seed = 64) -> np.shape(N, N, N//2+1)`
- `cu.calculate_sigma(dataset, R = 8) -> float`
  #### parametters:
  - `L, N`: _float, int_ || length and numbers for the simulation cube
  - `dataset`: np.ndarray || data of $k$ and $P(k)$ (for example, generated from CAMB and import as `np.loadtxt(''file_name.dat')`)
  - `seed`: _int_ || random seed
  - `R`: _float_ || radius, usually $R=8$ when we calculate $\sigma_8$

### growth
- `cu.D(z, m0, Lambda0, r0) -> z.shape()` 

  #### parameters:
  - `z`: _ArrayLike_  || redshift
  - `m0, Lambda0, r0`" _float_ || $\Omega_{m,0},\Omega_{\Lambda,0},\Omega_{r,0} $ 
  
 Calculate the linear growth factor $D(z)$ with cosmological parameters $\Omega_{m,0},\Omega_{\Lambda,0},\Omega_{r,0} $, where $m,\Lambda, r$ refer to matter, cosmological constant (dark energy)  and radiation. Especially, if  $\Omega_{m,0}+\Omega_{\Lambda,0}+\Omega_{r,0} \neq1$, it will calculate the curvature $\Omega_{k,0}$ which growths as $(1+z)^2$.


### power_spectrum
- `cu.estimator(L, N, ff) -> [np.ndarray, np.ndarray, np.ndarray]`
  #### parametters:
  - `L, N`: _float, int_ || length and numbers for the simulation cube
  - `ff`: _np.ndarray_ || field in Fourier space

  #### return:
  - `cu.estimator(L, N, ff)[0]`: k_vals
  - `cu.estimator(L, N, ff)[1]`: $ P(k)$ 
  - `cu.estimator(L, N, ff)[2]`: number of modes in each bin
